'''
Trained NN weights; to be imported in metrics.py
'''
import metrics
import math
import numpy as np

"""
Euclidean distance weights
"""
EUCL_WEIGHTS_30 = [ 1.10026419,  1.0263952,   0.9304105,   0.85382241,  0.77258968,  0.72109461,\
  0.65856069,  0.61032903,  0.57891625,  0.53759968,  0.4884896,   0.44624957,\
  0.41071036,  0.37250572,  0.32352573,  0.27119225,  0.23024195,  0.18805961,\
  0.16053793,  0.13124765,  0.11254424,  0.09147459,  0.07209747,  0.05951371,\
  0.05351086,  0.04289127,  0.03622571,  0.03282915,  0.03560645,  0.03807954]
MAX_WEIGHT_30_EUCL = max(EUCL_WEIGHTS_30)
EUCL_WEIGHTS_30 = [x / MAX_WEIGHT_30_EUCL for x in EUCL_WEIGHTS_30]

EUCL_WEIGHTS_20 = [ 1.05397773,  0.94628131,  0.83746392,  0.73916751,  0.6575678,   0.59150094,\
  0.5270862,   0.47401378,  0.40566137,  0.34171388, 0.27870089,  0.21246055,\
  0.15833862,  0.11976092,  0.09010734,  0.0679704,   0.05360122,  0.0371891,\
  0.03140201,  0.03332378]
MAX_WEIGHT_20_EUCL = max(EUCL_WEIGHTS_20)
EUCL_WEIGHTS_20 = [x / MAX_WEIGHT_20_EUCL for x in EUCL_WEIGHTS_20]

EUCL_WEIGHTS_10 = [ 1.02439129,  0.76391971,  0.59579891,  0.50105911,  0.37534121,  0.28332001,\
  0.17844455,  0.08148635,  0.0338844,   0.02421765]
MAX_WEIGHT_10_EUCL = max(EUCL_WEIGHTS_10)
EUCL_WEIGHTS_10 = [x / MAX_WEIGHT_10_EUCL for x in EUCL_WEIGHTS_10]

#Quadratic coefficients (for max length 35)
EUCL_WEIGHTS_R = [ 0.000882,  -0.05743,  1.00]

#Exponential weight for tweets (for max length 35) (median+xe loss) (1.19608235 voor cut-off, 1.69332433 zonder cut-off)
EUCL_WEIGHTS_T = [1.19608235, math.log(1 - 1.0/(1.19608235)) / 34.0, 1.0 - (1.19608235)]

#Variable length weights for tweets (median+xe loss)
#NO CUTOFF
EUCL_WEIGHTS_V = [ 0.59314102,  0.73507053,  1.38841379,  1.15035963,  0.82134843,
        0.2848646 ,  0.37473115,  0.41021937,  0.2923077 ,  0.24202976,
        0.27780652,  0.27974939,  0.07283844,  0.13711925,  0.08637914,
        0.02672946,  0.11644804,  0.1507206 ,  0.24248326,  0.37749591,
        0.16281068,  0.38322839,  0.48261443,  0.40340808,  0.57745612,
        0.30640733,  0.0992021 ,  0.07006015,  0.12309764,  0.30799162,
        0.43938974,  0.04764131,  0.06216007,  0.5073117 ,  0.4380444 ]
#LESS SEVERE COST (factor 40)
# EUCL_WEIGHTS_V = [ 1.16226089,  0.63132721,  2.29097533,  2.12581944,  1.53553343,
#         0.68295515,  0.78631222,  0.88050437,  0.74649501,  0.52076495,
#         0.64624494,  0.49870685,  0.31508899,  0.31573525,  0.18438281,
#         0.2305184 ,  0.38173297,  0.34825638,  0.56207681,  0.71985084,
#         0.42406607,  0.67216235,  0.81492752,  0.6782732 ,  0.97220773,
#         0.53654867,  0.39887893,  0.31514004,  0.33640844,  0.50718999,
#         0.7654354 ,  0.26974657,  0.39759538,  0.49004719,  0.67421252]
#OTHER INIT (factor 60)
# EUCL_WEIGHTS_V = [ 0.97319007,  1.08807147,  2.14449406,  1.86438704,  1.40342832,
#         0.58751243,  0.65945196,  0.71502578,  0.58396405,  0.41929209,
#         0.61317241,  0.45363784,  0.28912064,  0.30560637,  0.15649542,
#         0.1929287 ,  0.29287282,  0.26236776,  0.40237445,  0.60623968,
#         0.30088449,  0.52673829,  0.64723516,  0.5182538 ,  0.72503608,
#         0.42809895,  0.20421034,  0.1722804 ,  0.22979932,  0.37882349,
#         0.40431914, -0.14269255,  0.00245532,  0.01985661,  0.68787414]
#LINEAR WEIGHTS (factor 60)
EUCL_WEIGHTS_L = [ 0.74909449,  0.62084872,  0.4986147 ,  0.41325   ,  0.3867918 ,
        0.41822964,  0.59727401,  0.69389212,  0.72370845,  0.62929356,
        0.54968631,  0.49089473,  0.45877475,  0.4489474 ,  0.45333597,
        0.44878128,  0.46548447,  0.47443801,  0.46974397,  0.47870326,
        0.49031645,  0.49467015,  0.49948767,  0.49727705,  0.50002569,
        0.49839711,  0.49972054,  0.5001055 ,  0.50008011,  0.50002211,
        0.50005496,  0.49993986,  0.50002468,  0.50002468,  0.4999986 ]
#CUTOFF
# EUCL_WEIGHTS_V = [ 0.92629421,  0.70577306,  1.81716204,  1.37490761,  0.50438458,  0.5692848,
#   0.88254631,  0.56738013,  0.46771494,  0.38783097,  0.38318002,  0.13875291,
#   0.23105697,  0.19301678,  0.36093768,  0.36040401,  0.48521453,  0.40566674,
#   0.58067054,  0.65910327,  0.47394246,  0.69188505, 0.51276302,  0.47243956,
#   0.41969353,  0.38400632,  0.50605428,  0.53242439,  0.44555312,  0.40894482,
#   0.42454731,  0.52150619,  0.5,         0.5,         0.5       ]

"""
Median-based loss
"""
EUCL_WEIGHTS_20M = [2.17692494,  0.95888114,  0.92392629,  0.81542873,  0.75089961,
        0.7040484 ,  0.68747544,  0.59452856,  0.52464068,  0.43262285,
        0.28515396,  0.17203996,  0.12663649,  0.12570298,  0.14540415,
        0.12590094,  0.11762312,  0.11596295,  0.12752819,  0.12]
MAX_WEIGHT_20M_EUCL = max(EUCL_WEIGHTS_20M)
EUCL_WEIGHTS_20M = [x / MAX_WEIGHT_20M_EUCL for x in EUCL_WEIGHTS_20M]

# EUCL_WEIGHTS_VC = [ 1.53197432,  0.09122959,  0.16378205,  0.35309145,  0.4084323 ,
#         0.24213411,  0.23427147,  0.29963905,  0.23747461,  0.19473995,
#         0.20712331,  0.20731464,  0.15523219,  0.15809423,  0.1358095 ,
#         0.18211856,  0.09743364,  0.25734791,  0.10964594,  0.21359344,
#         0.15899019,  0.1780984 ,  0.17491768,  0.20674141,  0.20546171,
#         0.15213946,  0.1670257 ,  0.17584756,  0.12987936,  0.15642129,
#         0.24214588,  0.13950771,  0.06092097,  0.08467364,  0.58307779]
EUCL_WEIGHTS_VC = [ 6.80561543,  0.51282305,  0.84120899,  1.71269655,  1.94345295,
        1.19935274,  1.16319001,  1.45425606,  1.17406535,  0.98066682,
        1.03894091,  1.03501654,  0.80169964,  0.82286006,  0.71593571,
        0.93814641,  0.54296744,  1.28998029,  0.59907126,  1.08822358,
        0.83579457,  0.93019366,  0.91357583,  1.05581069,  1.05993724,
        0.81400633,  0.87754947,  0.91901129,  0.71884167,  0.83200783,
        1.21343338,  0.76037806,  0.38874203,  0.48388585,  2.71415329]
MAX_WEIGHT_VC_EUCL = max(EUCL_WEIGHTS_VC)
EUCL_WEIGHTS_VC = [x / MAX_WEIGHT_VC_EUCL for x in EUCL_WEIGHTS_VC]

EUCL_WEIGHTS_VM = [ 1.24929249,  2.92350149,  1.11134338,  0.5043171 ,  1.05904222,
        0.76712835,  0.4939732 ,  0.61647367,  0.68465853,  0.5474447 ,
        0.45219299,  0.61092538,  0.48176807,  0.2437554 ,  0.41121382,
        0.32590553,  0.17680591,  0.14189789,  0.15314148,  0.15847394,
        0.10466012,  0.13646236,  0.15810829,  0.11587798,  0.06609657,
        0.15787578,  0.14787148,  0.01387   ,  0.38941178,  0.23992451]
MAX_WEIGHT_VM_EUCL = max(EUCL_WEIGHTS_VM)
EUCL_WEIGHTS_VM = [x / MAX_WEIGHT_VM_EUCL for x in EUCL_WEIGHTS_VM]



"""
Cosine distance weights
"""
COS_WEIGHTS_20 = [ 1.58099461,  1.07427275,  0.75110525,  0.60903746,  0.46520346,  0.36120412,\
  0.20370276,  0.14845745,  0.01340143, -0.08686798, -0.15357243, -0.25293297,\
 -0.30768782, -0.28316644, -0.2847701,  -0.26149195, -0.2528719,  -0.2555331,\
 -0.29393938, -0.36560076]


"""
Euclidean distance weights with IDF
"""
EUCL_WEIGHTS_20_IDF = [ 9.82688332,  7.42248201,  5.64734745,  4.52572584,  3.6230619,   2.92270923,\
  2.33523536,  1.93071854,  1.52863014,  1.1701802,   0.85422289,  0.56920975,\
  0.38981956,  0.26054519,  0.16729164,  0.11033781,  0.0668135,   0.04944845,\
  0.03485277,  0.02445895]
MAX_IDF_20_EUCL_WEIGHT = max(EUCL_WEIGHTS_20_IDF)
EUCL_WEIGHTS_20_IDF = [x / MAX_IDF_20_EUCL_WEIGHT for x in EUCL_WEIGHTS_20_IDF]


"""
Mean idf weights
"""
EUCL_WEIGHTS_20_IDFMEAN = [ 1.,          0.8559665,   0.76644242 , 0.70160153  ,0.64957064 , 0.6044981,
  0.56317701 , 0.52333452 , 0.48378107 , 0.4414409 ,  0.39669208,  0.348032,
  0.29741953,  0.24896909 , 0.20661059 , 0.17116838,  0.14290256,  0.12141767,
  0.1049525 ,  0.09268811]


def get_weights_variable_name(distance=metrics.euclidean, length=20):
    prefix = 'EUCL'

    if distance == metrics.cosine:
        prefix = 'COS'

    return globals()[prefix + '_WEIGHTS_' + str(length)]